name: CI/CD Pipeline - Single ECR Repo

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPO: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/my-app-repository

jobs:
  db-sync:
    name: Sync Local to Aurora DB
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Add PostgreSQL to PATH
        shell: powershell
        run: |
          $env:Path += ";C:\Program Files\PostgreSQL\15\bin"
      - name: Run DB Sync Script
        shell: powershell
        run: powershell -ExecutionPolicy Bypass -File .\scripts\db.ps1

  configure-aws:
    name: Configure AWS Credentials
    runs-on: windows-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

  build-services:
    name: Build Docker Images (single repo)
    needs: [db-sync, configure-aws]
    runs-on: self-hosted
    strategy:
      matrix:
        service:
          - name: auth-service
            path: backend/auth
          - name: staff-service
            path: backend/staff
          - name: event-service
            path: backend/event
          - name: frontend-service
            path: planit-frontend1

    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Tag Docker Image
        shell: powershell
        run: |
          $repo = "${{ env.ECR_REPO }}"
          $service = "${{ matrix.service.name }}"
          $path = "${{ matrix.service.path }}"
          $sha = "${{ github.sha }}"
          
          Write-Host "Building image for service: $service, from path: $path"
          
          docker buildx build --load -t "${repo}:$service-latest" "$path"
          docker tag "${repo}:$service-latest" "${repo}:$service-$sha"

  trivy-scan:
    name: Run Trivy Security Scan
    needs: build-services
    runs-on: self-hosted
    steps:
      - name: Install Trivy (Windows)
        shell: powershell
        run: |
          $trivyUrl = "https://github.com/aquasecurity/trivy/releases/download/v0.60.0/trivy_0.60.0_Windows-64bit.zip"
          $trivyExtractPath = "C:\tools\trivy"
          Invoke-WebRequest -Uri $trivyUrl -OutFile "trivy.zip"
          Expand-Archive -Path "trivy.zip" -DestinationPath $trivyExtractPath -Force
          echo "$trivyExtractPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Scan images with Trivy
        shell: powershell
        run: |
          $services = @("auth-service", "staff-service", "event-service", "frontend-service")
          $repo = "${{ env.ECR_REPO }}"
          $sha = "${{ github.sha }}"
          
          foreach ($svc in $services) {
            $latestTag = "${repo}:$svc-latest"
            $shaTag = "${repo}:$svc-$sha"
            Write-Host "Scanning $latestTag"
            trivy image --exit-code 1 --severity HIGH,CRITICAL $latestTag
            Write-Host "Scanning $shaTag"
            trivy image --exit-code 1 --severity HIGH,CRITICAL $shaTag
          }

  sonarqube-scan:
    name: Run SonarQube Scan
    needs: build-services
    runs-on: self-hosted
    steps:
      - name: Install SonarScanner (Windows)
        shell: powershell
        run: |
          Invoke-WebRequest -Uri "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-windows.zip" -OutFile "sonarscanner.zip"
          Expand-Archive -Path "sonarscanner.zip" -DestinationPath "C:\sonar-scanner" -Force
          echo "C:\sonar-scanner\sonar-scanner-5.0.1.3006-windows\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Run SonarQube Scan
        shell: powershell
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN1 }}
          SONAR_HOST_URL: https://sonarcloud.io
        run: |
          sonar-scanner `
            -D"sonar.projectKey=kawtherbt_deployment" `
            -D"sonar.sources=." `
            -D"sonar.host.url=$env:SONAR_HOST_URL" `
            -D"sonar.login=$env:SONAR_TOKEN1" `
            -D"sonar.organization=kawtherbt
            -D"sonar.c.file.suffixes=-" `
            -D"sonar.cpp.file.suffixes=-" `
            -D"sonar.objc.file.suffixes=-"

  owasp-dependency-check:
    name: Run OWASP Dependency-Check
    needs: sonarqube-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'netflix-clone-frontend'
          path: '.'
          format: 'HTML'
          out: './reports/dependencyCheck'
          args: >
            --enableRetired
            --enableExperimental
      - uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-reports
          path: './reports'

  push-to-ecr:
    name: Push Docker Images to ECR
    needs: [trivy-scan, sonarqube-scan, owasp-dependency-check]
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/amazon-ecr-login@v2

      - name: Push images to single ECR repo
        shell: powershell
        run: |
          $services = @("auth-service", "staff-service", "event-service", "frontend-service")
          $repo = "${{ env.ECR_REPO }}"
          $sha = "${{ github.sha }}"
          
          foreach ($svc in $services) {
            $latestTag = "${repo}:$svc-latest"
            $shaTag = "${repo}:$svc-$sha"
            Write-Host "Pushing $latestTag"
            docker push $latestTag
            Write-Host "Pushing $shaTag"
            docker push $shaTag
          }

      - name: Logout from Amazon ECR
        shell: powershell
        run: docker logout ${{ env.ECR_REPO }}
