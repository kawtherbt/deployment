on:
  push:
    branches:
      - main
jobs:
  db-sync:
    name: Sync Local to Aurora DB
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add PostgreSQL to PATH
        run: |
          $env:Path += ";C:\Program Files\PostgreSQL\15\bin"
        shell: powershell

      - name: Run DB Sync Script
        run: |
          powershell -ExecutionPolicy Bypass -File .\scripts\db.ps1
        shell: powershell

  configure-aws:
    name: Configure AWS Credentials
    runs-on: windows-latest  
    outputs:
      aws-configured: ${{ steps.set-output.outputs.success }}
    steps:
      - name: Configure AWS Credentials
        id: set-output
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

  build-image:
    name: Build Docker Image
    needs: [db-sync, configure-aws]
    runs-on: self-hosted
    strategy:
      matrix:
        service:
          - { name: auth-service,     path: backend/auth,        is_frontend: false }
          - { name: staff-service,    path: backend/staff,       is_frontend: false }
          - { name: event-service,    path: backend/event,       is_frontend: false }
          - { name: frontend-service, path: planit-frontend1,    is_frontend: true }
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker Image - ${{ matrix.service.name }}
        shell: powershell
        run: |
          $serviceName = "${{ matrix.service.name }}"
          $contextPath = "${{ matrix.service.path }}"
          $isFrontend = "${{ matrix.service.is_frontend }}"

          if ($isFrontend -eq "true") {
            $imageRepo = "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/frontend/$serviceName"
          } else {
            $imageRepo = "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend/$serviceName"
          }

          docker buildx build --load -t "$imageRepo:latest" "$contextPath"

          docker tag "$imageRepo:latest" "$imageRepo:${{ github.sha }}"

  trivy-scan:
    name: Run Trivy Security Scan
    needs: build-image
    runs-on: self-hosted
    steps:
      - name: Install Trivy (Windows)
        run: |
          $trivyUrl = "https://github.com/aquasecurity/trivy/releases/download/v0.60.0/trivy_0.60.0_Windows-64bit.zip"
          $trivyExtractPath = "C:\tools\trivy"
          Invoke-WebRequest -Uri $trivyUrl -OutFile "trivy.zip"
          Expand-Archive -Path "trivy.zip" -DestinationPath $trivyExtractPath -Force
          echo "$trivyExtractPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: powershell

      - name: Run Trivy Scan
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL `
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/my-app-repository:latest
          trivy image --exit-code 1 --severity HIGH,CRITICAL `
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/my-app-repository:${{ github.sha }}
        shell: powershell

  sonarqube-scan:
    name: Run SonarQube Scan
    needs: build-image
    runs-on: self-hosted
    steps:
      - name: Install SonarScanner (Windows)
        run: |
          Invoke-WebRequest -Uri "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-windows.zip" -OutFile "sonarscanner.zip"
          Expand-Archive -Path "sonarscanner.zip" -DestinationPath "C:\sonar-scanner" -Force
          echo "C:\sonar-scanner\sonar-scanner-5.0.1.3006-windows\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: powershell

      - name: Run SonarQube Scan
        shell: powershell
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN1 }}
          SONAR_HOST_URL: https://sonarcloud.io
        run: |
          sonar-scanner `
            -D"sonar.projectKey=kawtherbt_deployment" `
            -D"sonar.sources=." `
            -D"sonar.host.url=$env:SONAR_HOST_URL" `
            -D"sonar.login=$env:SONAR_TOKEN" `
            -D"sonar.organization=kawtherbt"

  owasp-dependency-check:
    name: Run OWASP Dependency-Check
    needs: sonarqube-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'netflix-clone-frontend'
          path: '.'  # Root directory (where package.json is)
          format: 'HTML'
          out: './reports/dependencyCheck'
          args: >
            --enableRetired
            --enableExperimental

      - name: Upload OWASP Dependency-Check reports
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-reports
          path: './reports'

  push-to-ecr:
    name: Push Docker Image to ECR
    needs: [trivy-scan, sonarqube-scan, owasp-dependency-check]
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Docker Image to Amazon ECR
        shell: powershell
        run: |
          $accountId = "${{ secrets.AWS_ACCOUNT_ID }}"
          $sha = "${{ github.sha }}"

          $services = @(
            @{ Name = "auth-service";     IsFrontend = $false },
            @{ Name = "staff-service";    IsFrontend = $false },
            @{ Name = "event-service";    IsFrontend = $false },
            @{ Name = "frontend-service"; IsFrontend = $true  }
          )

          foreach ($svc in $services) {
            $repoType = if ($svc.IsFrontend) { "frontend" } else { "backend" }
            $image = "$accountId.dkr.ecr.us-east-1.amazonaws.com/$repoType/$($svc.Name)"

            Write-Host "Pushing $image:latest"
            docker push "$image:latest"
            Write-Host "Pushing $image:$sha"
            docker push "$image:$sha"
          }
                
      - name: Logout from Amazon ECR
        run: docker logout ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
        shell: powershell
